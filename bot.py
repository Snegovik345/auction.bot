from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from logic import DatabaseManager, hide_img 
import schedule
import threading
import time
from config import DATABASE 
import os
bot = TeleBot("7913448899:AAG_naSZlVR9Rk2JTOtSfRfLDYboeRmN9tI")

def gen_markup(id):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å!", callback_data=id))
    return markup

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):

    prize_id = call.data
    user_id = call.message.chat.id

    img = manager.get_prize_img(prize_id)
    with open(f'img/{img}', 'rb') as photo:
        bot.send_photo(user_id, photo)


def send_message():
    prize_id, img = manager.get_random_prize()[:2]
    manager.mark_prize_used(prize_id)
    hide_img(img)
    for user in manager.get_users():
        with open(f'hidden_img/{img}', 'rb') as photo:
            bot.send_photo(user, photo, reply_markup=gen_markup(id = prize_id))
        

def shedule_thread():
    schedule.every().minute.do(send_message) 
    while True:
        schedule.run_pending()
        time.sleep(1)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    if user_id in manager.get_users():
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        manager.add_user(user_id, message.from_user.username)
        bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
–¢–µ–±—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏!
–ö–∞–∂–¥—ã–π —á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å!
–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!'

–¢–æ–ª—å–∫–æ —Ç—Ä–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É!)""")
@bot.message_handler(commands=['rating'])
def handle_rating(message):
    rating_data = manager.get_rating()  
    if not rating_data:
        bot.send_message(message.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç!")
        return
    header = "| –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ |\n" + "-"*35
    rows = [f"| @{row[0]:<15} | {row[1]:<16} |" for row in rating_data]
    rating_table = header + "\n" + "\n".join(rows)
    
    bot.send_message(message.chat.id, f"<pre>{rating_table}</pre>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    prize_id = call.data
    user_id = call.message.chat.id
    winners_count = manager.get_winners_count(prize_id)
    
    if winners_count < 3:
        result = manager.add_winner(user_id, prize_id)
        if result == 1:  
            manager.mark_prize_as_used(prize_id)
            prize_image = manager.get_prize_image(prize_id)
            
            if prize_image and os.path.exists(f'img/{prize_image}'):
                with open(f'img/{prize_image}', 'rb') as photo:
                    bot.send_photo(
                        user_id, 
                        photo, 
                        caption="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–∑!"
                    )
            else:
                bot.send_message(user_id, "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        elif result == 0:
            bot.answer_callback_query(
                call.id, 
                "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–∏–∑!", 
                show_alert=True
            )
    else:
        bot.answer_callback_query(
            call.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–∑ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!",
            show_alert=True
        )
        


def polling_thread():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    manager = DatabaseManager(DATABASE)
    manager.create_tables()

    polling_thread = threading.Thread(target=polling_thread)
    polling_shedule  = threading.Thread(target=shedule_thread)

    polling_thread.start()
    polling_shedule.start()
  
